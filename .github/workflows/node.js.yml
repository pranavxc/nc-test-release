# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - uses: cardinalby/git-get-release-action@v1
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.NC_GITHUB_TOKEN }}
        with:
          tag: '1.0'
          draft: true
      - run: |
          openssl rand -base64 12 > out1.js
          echo "${{ steps.get_release.outputs.upload_url }}"
        
#       - name: Upload mac executables to release
#         uses: svenstaro/upload-release-action@v2
#         with:
#           repo_token: ${{ secrets.NC_GITHUB_TOKEN }}
#           file: out1.js
#           tag: '1.0'
#           overwrite: true
#           file_glob: true
#       - name: Upload release binary
#         uses: actions/upload-release-asset@v1.0.2
#         env:
#           GITHUB_TOKEN: ${{ github.token }}
#         with:
#           upload_url: ${{ steps.get_release.outputs.upload_url }}
#           asset_path: ./out1.js
#           asset_name: my-widget
#           asset_content_type: application/octet-stream

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./out1.js
          asset_name: AssetName
          asset_content_type: application/octet-stream

